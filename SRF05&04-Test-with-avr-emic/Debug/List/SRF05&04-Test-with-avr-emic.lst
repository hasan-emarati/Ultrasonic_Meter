
AVRASM ver. 2.1.30  I:\meter\SRF05&04-Test-with-avr-emic\Debug\List\SRF05&04-Test-with-avr-emic.asm Mon May 09 22:12:03 2022

I:\meter\SRF05&04-Test-with-avr-emic\Debug\List\SRF05&04-Test-with-avr-emic.asm(1088): warning: Register r5 already defined by the .DEF directive
I:\meter\SRF05&04-Test-with-avr-emic\Debug\List\SRF05&04-Test-with-avr-emic.asm(1089): warning: Register r4 already defined by the .DEF directive
I:\meter\SRF05&04-Test-with-avr-emic\Debug\List\SRF05&04-Test-with-avr-emic.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0062 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 008f 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _char0:
00002a 0a00
00002b 1f1f
00002c 040e
00002d 0000      	.DB  0x0,0xA,0x1F,0x1F,0xE,0x4,0x0,0x0
                 
                 _0x0:
00002e 6820
00002f 7361
000030 6e61
000031 6520      	.DB  0x20,0x68,0x61,0x73,0x61,0x6E,0x20,0x65
000032 616d
000033 6172
000034 6974
000035 0020      	.DB  0x6D,0x61,0x72,0x61,0x74,0x69,0x20,0x0
000036 6c55
000037 7274
000038 7361
000039 6e6f      	.DB  0x55,0x6C,0x74,0x72,0x61,0x73,0x6F,0x6E
00003a 6369
00003b 6d20
00003c 7465
00003d 7265      	.DB  0x69,0x63,0x20,0x6D,0x65,0x74,0x65,0x72
00003e 0020
00003f 6964
000040 7473
000041 6e61      	.DB  0x20,0x0,0x64,0x69,0x73,0x74,0x61,0x6E
000042 6563
000043 003d
000044 6d63
000045 6f00      	.DB  0x63,0x65,0x3D,0x0,0x63,0x6D,0x0,0x6F
000046 7475
000047 6f20
000048 2066
000049 6172      	.DB  0x75,0x74,0x20,0x6F,0x66,0x20,0x72,0x61
00004a 676e
00004b 2065
00004c 2020
00004d 0020      	.DB  0x6E,0x67,0x65,0x20,0x20,0x20,0x20,0x0
                 _0x2000003:
00004e c080      	.DB  0x80,0xC0
                 _0x2020060:
I:\meter\SRF05&04-Test-with-avr-emic\Debug\List\SRF05&04-Test-with-avr-emic.asm(1136): warning: .cseg .db misalignment - padding zero byte
00004f 0001      	.DB  0x1
                 _0x2020000:
000050 4e2d
000051 4e41
000052 4900
000053 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
I:\meter\SRF05&04-Test-with-avr-emic\Debug\List\SRF05&04-Test-with-avr-emic.asm(1139): warning: .cseg .db misalignment - padding zero byte
000054 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000055 0010      	.DW  0x10
000056 0160      	.DW  _0x6
000057 005c      	.DW  _0x0*2
                 
000058 0012      	.DW  0x12
000059 0170      	.DW  _0x6+16
00005a 006c      	.DW  _0x0*2+16
                 
00005b 0002      	.DW  0x02
00005c 01aa      	.DW  __base_y_G100
00005d 009c      	.DW  _0x2000003*2
                 
00005e 0001      	.DW  0x01
00005f 01ae      	.DW  __seed_G101
000060 009e      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000061 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000062 94f8      	CLI
000063 27ee      	CLR  R30
000064 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000065 e0f1      	LDI  R31,1
000066 bffb      	OUT  GICR,R31
000067 bfeb      	OUT  GICR,R30
000068 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000069 e08d      	LDI  R24,(14-2)+1
00006a e0a2      	LDI  R26,2
00006b 27bb      	CLR  R27
                 __CLEAR_REG:
00006c 93ed      	ST   X+,R30
00006d 958a      	DEC  R24
00006e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000070 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000071 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000072 93ed      	ST   X+,R30
000073 9701      	SBIW R24,1
000074 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000075 eaea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000076 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000077 9185      	LPM  R24,Z+
000078 9195      	LPM  R25,Z+
000079 9700      	SBIW R24,0
00007a f061      	BREQ __GLOBAL_INI_END
00007b 91a5      	LPM  R26,Z+
00007c 91b5      	LPM  R27,Z+
00007d 9005      	LPM  R0,Z+
00007e 9015      	LPM  R1,Z+
00007f 01bf      	MOVW R22,R30
000080 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000081 9005      	LPM  R0,Z+
000082 920d      	ST   X+,R0
000083 9701      	SBIW R24,1
000084 f7e1      	BRNE __GLOBAL_INI_LOOP
000085 01fb      	MOVW R30,R22
000086 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000087 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000088 bfed      	OUT  SPL,R30
000089 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008c e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008d 940c 00c8 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;////////////////////////////////////////////
                 ;typedef unsigned char byte;
                 ;flash byte char0[8]={0,10,31,31,14,4,0,0};
                 ;////////////////////////////////////////////
                 ;long int overflow=0;
                 ;long int overflowm=0;
                 ;unsigned long int  Counter=0;
                 ;unsigned long int  Counterm=0;
                 ;float distance=0.0;
                 ;float distancem=0.0;
                 ;unsigned char lcd[16];
                 ;///////////////////////////////////////////////////
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0013 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00008f 936a      	ST   -Y,R22
000090 937a      	ST   -Y,R23
000091 93aa      	ST   -Y,R26
000092 93ba      	ST   -Y,R27
000093 93ea      	ST   -Y,R30
000094 93fa      	ST   -Y,R31
000095 b7ef      	IN   R30,SREG
000096 93ea      	ST   -Y,R30
                 ; 0000 0014 overflow++;
000097 e8a2      	LDI  R26,LOW(_overflow)
000098 e0b1      	LDI  R27,HIGH(_overflow)
000099 940e 060c 	CALL __GETD1P_INC
                +
00009b 5fef     +SUBI R30 , LOW ( - 1 )
00009c 4fff     +SBCI R31 , HIGH ( - 1 )
00009d 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00009e 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
00009f 940e 0611 	CALL __PUTDP1_DEC
                 ; 0000 0015 TCNT0=0x00;
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 bfe2      	OUT  0x32,R30
                 ; 0000 0016 }
0000a3 91e9      	LD   R30,Y+
0000a4 bfef      	OUT  SREG,R30
0000a5 91f9      	LD   R31,Y+
0000a6 91e9      	LD   R30,Y+
0000a7 91b9      	LD   R27,Y+
0000a8 91a9      	LD   R26,Y+
0000a9 9179      	LD   R23,Y+
0000aa 9169      	LD   R22,Y+
0000ab 9518      	RETI
                 ; .FEND
                 ;/////////////////////////////////////////////////////
                 ;void define_char(byte flash *pc,byte char_code){
                 ; 0000 0018 void define_char(byte flash *pc,byte char_code){
                 _define_char:
                 ; .FSTART _define_char
                 ; 0000 0019 byte i,a;
                 ; 0000 001A a=(char_code<<3)|0x40;
0000ac 93aa      	ST   -Y,R26
0000ad 931a      	ST   -Y,R17
0000ae 930a      	ST   -Y,R16
                 ;	*pc -> Y+3
                 ;	char_code -> Y+2
                 ;	i -> R17
                 ;	a -> R16
0000af 81ea      	LDD  R30,Y+2
0000b0 0fee      	LSL  R30
0000b1 0fee      	LSL  R30
0000b2 0fee      	LSL  R30
0000b3 64e0      	ORI  R30,0x40
0000b4 2f0e      	MOV  R16,R30
                 ; 0000 001B for (i=0; i<8; i++) lcd_write_byte(a++,*pc++);
0000b5 e010      	LDI  R17,LOW(0)
                 _0x4:
0000b6 3018      	CPI  R17,8
0000b7 f460      	BRSH _0x5
0000b8 930a      	ST   -Y,R16
0000b9 9503      	INC  R16
0000ba 81ec      	LDD  R30,Y+4
0000bb 81fd      	LDD  R31,Y+4+1
0000bc 9631      	ADIW R30,1
0000bd 83ec      	STD  Y+4,R30
0000be 83fd      	STD  Y+4+1,R31
0000bf 9731      	SBIW R30,1
0000c0 91a4      	LPM  R26,Z
0000c1 d115      	RCALL _lcd_write_byte
0000c2 5f1f      	SUBI R17,-1
0000c3 cff2      	RJMP _0x4
                 _0x5:
                 ; 0000 001C }
0000c4 8119      	LDD  R17,Y+1
0000c5 8108      	LDD  R16,Y+0
0000c6 9625      	ADIW R28,5
0000c7 9508      	RET
                 ; .FEND
                 ;//////////////////////////////////////////////////
                 ;
                 ;void main(void)
                 ; 0000 0020 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0021 
                 ; 0000 0022 
                 ; 0000 0023 
                 ; 0000 0024 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (1<<DDA0);
0000c8 e0e1      	LDI  R30,LOW(1)
0000c9 bbea      	OUT  0x1A,R30
                 ; 0000 0025 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000ca e0e0      	LDI  R30,LOW(0)
0000cb bbeb      	OUT  0x1B,R30
                 ; 0000 0026 
                 ; 0000 0027 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000cc efef      	LDI  R30,LOW(255)
0000cd bbe1      	OUT  0x11,R30
                 ; 0000 0028 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bbe2      	OUT  0x12,R30
                 ; 0000 0029 
                 ; 0000 002A DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
0000d0 e0e1      	LDI  R30,LOW(1)
0000d1 bbe4      	OUT  0x14,R30
                 ; 0000 002B PORTD=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000d2 e0e0      	LDI  R30,LOW(0)
0000d3 bbe2      	OUT  0x12,R30
                 ; 0000 002C 
                 ; 0000 002D // Timer/Counter 0 initialization
                 ; 0000 002E // Clock source: System Clock
                 ; 0000 002F // Clock value: 1000/000 kHz
                 ; 0000 0030 // Mode: Normal top=0xFF
                 ; 0000 0031 // OC0 output: Disconnected
                 ; 0000 0032 // Timer Period: 0/256 ms
                 ; 0000 0033 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
0000d4 e0e2      	LDI  R30,LOW(2)
0000d5 bfe3      	OUT  0x33,R30
                 ; 0000 0034 TCNT0=0x00;
0000d6 e0e0      	LDI  R30,LOW(0)
0000d7 bfe2      	OUT  0x32,R30
                 ; 0000 0035 OCR0=0x00;
0000d8 bfec      	OUT  0x3C,R30
                 ; 0000 0036 
                 ; 0000 0037 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000d9 e0e1      	LDI  R30,LOW(1)
0000da bfe9      	OUT  0x39,R30
                 ; 0000 0038 
                 ; 0000 0039 lcd_init(16);
0000db e1a0      	LDI  R26,LOW(16)
0000dc 940e 022f 	CALL _lcd_init
                 ; 0000 003A 
                 ; 0000 003B // Global enable interrupts
                 ; 0000 003C define_char(char0,0);
0000de e5e4      	LDI  R30,LOW(_char0*2)
0000df e0f0      	LDI  R31,HIGH(_char0*2)
0000e0 93fa      	ST   -Y,R31
0000e1 93ea      	ST   -Y,R30
0000e2 e0a0      	LDI  R26,LOW(0)
0000e3 dfc8      	RCALL _define_char
                 ; 0000 003D #asm("sei")
0000e4 9478      	sei
                 ; 0000 003E 
                 ; 0000 003F 
                 ; 0000 0040 
                 ; 0000 0041 
                 ; 0000 0042 lcd_gotoxy(0,0);
0000e5 940e 037f 	CALL SUBOPT_0x0
                 ; 0000 0043 lcd_puts(" hasan emarati ");
                +
0000e7 e6a0     +LDI R26 , LOW ( _0x6 + ( 0 ) )
0000e8 e0b1     +LDI R27 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW2MN _0x6,0
0000e9 d123      	RCALL _lcd_puts
                 ; 0000 0044 lcd_gotoxy(0,0);
0000ea 940e 037f 	CALL SUBOPT_0x0
                 ; 0000 0045 lcd_putchar(0);
0000ec e0a0      	LDI  R26,LOW(0)
0000ed d10a      	RCALL _lcd_putchar
                 ; 0000 0046 lcd_gotoxy(15,0);
0000ee e0ef      	LDI  R30,LOW(15)
0000ef 940e 0384 	CALL SUBOPT_0x1
                 ; 0000 0047 lcd_putchar(0);
0000f1 e0a0      	LDI  R26,LOW(0)
0000f2 d105      	RCALL _lcd_putchar
                 ; 0000 0048 delay_ms(1000);
0000f3 eea8      	LDI  R26,LOW(1000)
0000f4 e0b3      	LDI  R27,HIGH(1000)
0000f5 940e 040a 	CALL _delay_ms
                 ; 0000 0049 
                 ; 0000 004A lcd_clear();
0000f7 d0f4      	RCALL _lcd_clear
                 ; 0000 004B lcd_puts("Ultrasonic meter ");
                +
0000f8 e7a0     +LDI R26 , LOW ( _0x6 + ( 16 ) )
0000f9 e0b1     +LDI R27 , HIGH ( _0x6 + ( 16 ) )
                 	__POINTW2MN _0x6,16
0000fa d112      	RCALL _lcd_puts
                 ; 0000 004C delay_ms(3000);
0000fb eba8      	LDI  R26,LOW(3000)
0000fc e0bb      	LDI  R27,HIGH(3000)
0000fd 940e 040a 	CALL _delay_ms
                 ; 0000 004D lcd_clear();
0000ff d0ec      	RCALL _lcd_clear
                 ; 0000 004E 
                 ; 0000 004F 
                 ; 0000 0050 while (1)
                 _0x7:
                 ; 0000 0051      {
                 ; 0000 0052 
                 ; 0000 0053       PORTA.0=1;
000100 9ad8      	SBI  0x1B,0
                 ; 0000 0054       delay_us(10);
                +
000101 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000102 958a     +DEC R24
000103 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0055       PORTA.0=0;
000104 98d8      	CBI  0x1B,0
                 ; 0000 0056 
                 ; 0000 0057       while(PINA.1==0){};
                 _0xE:
000105 9bc9      	SBIS 0x19,1
000106 cffe      	RJMP _0xE
                 ; 0000 0058 
                 ; 0000 0059       overflow=0;
000107 e0e0      	LDI  R30,LOW(0)
000108 93e0 0182 	STS  _overflow,R30
00010a 93e0 0183 	STS  _overflow+1,R30
00010c 93e0 0184 	STS  _overflow+2,R30
00010e 93e0 0185 	STS  _overflow+3,R30
                 ; 0000 005A       TCNT0=0;
000110 bfe2      	OUT  0x32,R30
                 ; 0000 005B       TCCR0=0x02;
000111 e0e2      	LDI  R30,LOW(2)
000112 bfe3      	OUT  0x33,R30
                 ; 0000 005C       while(PINA.1==1){};
                 _0x11:
000113 99c9      	SBIC 0x19,1
000114 cffe      	RJMP _0x11
                 ; 0000 005D       TCCR0=0x00;
000115 e0e0      	LDI  R30,LOW(0)
000116 bfe3      	OUT  0x33,R30
                 ; 0000 005E 
                 ; 0000 005F       Counter=(overflow*256)+TCNT0;
000117 91e0 0182 	LDS  R30,_overflow
000119 91f0 0183 	LDS  R31,_overflow+1
00011b 9160 0184 	LDS  R22,_overflow+2
00011d 9170 0185 	LDS  R23,_overflow+3
00011f 940e 0388 	CALL SUBOPT_0x2
000121 93e0 018a 	STS  _Counter,R30
000123 93f0 018b 	STS  _Counter+1,R31
000125 9360 018c 	STS  _Counter+2,R22
000127 9370 018d 	STS  _Counter+3,R23
                 ; 0000 0060       distance=(Counter/2)*0.03432 ;
000129 940e 05ca 	CALL __LSRD1
00012b 940e 047e 	CALL __CDF1U
                +
00012d e2a1     +LDI R26 , LOW ( 0x3D0C9321 )
00012e e9b3     +LDI R27 , HIGH ( 0x3D0C9321 )
00012f e08c     +LDI R24 , BYTE3 ( 0x3D0C9321 )
000130 e39d     +LDI R25 , BYTE4 ( 0x3D0C9321 )
                 	__GETD2N 0x3D0C9321
000131 940e 050a 	CALL __MULF12
000133 93e0 0192 	STS  _distance,R30
000135 93f0 0193 	STS  _distance+1,R31
000137 9360 0194 	STS  _distance+2,R22
000139 9370 0195 	STS  _distance+3,R23
                 ; 0000 0061        if(Counter<30000) {
00013b 940e 0397 	CALL SUBOPT_0x3
00013d 940e 03a0 	CALL SUBOPT_0x4
00013f f008      	BRLO PC+2
000140 c05a      	RJMP _0x14
                 ; 0000 0062        lcd_clear();
000141 d0aa      	RCALL _lcd_clear
                 ; 0000 0063        lcd_gotoxy(0,0);
000142 940e 037f 	CALL SUBOPT_0x0
                 ; 0000 0064        lcd_putsf("distance=");
000144 940e 03a8 	CALL SUBOPT_0x5
                 ; 0000 0065        lcd_gotoxy(9,0);
                 ; 0000 0066        ftoa(distance,1,lcd);
000146 91e0 0192 	LDS  R30,_distance
000148 91f0 0193 	LDS  R31,_distance+1
00014a 9160 0194 	LDS  R22,_distance+2
00014c 9170 0195 	LDS  R23,_distance+3
00014e 940e 03ae 	CALL SUBOPT_0x6
                 ; 0000 0067        lcd_puts(lcd);
                 ; 0000 0068        if (PINC.1==1){delay_ms(1000);}
000150 9b99      	SBIS 0x13,1
000151 c004      	RJMP _0x15
000152 eea8      	LDI  R26,LOW(1000)
000153 e0b3      	LDI  R27,HIGH(1000)
000154 940e 040a 	CALL _delay_ms
                 ; 0000 0069        lcd_putsf("cm");
                 _0x15:
                +
000156 e8a8     +LDI R26 , LOW ( 2 * _0x0 + ( 44 ) )
000157 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 44 ) )
                 	__POINTW2FN _0x0,44
000158 940e 03ba 	CALL SUBOPT_0x7
                 ; 0000 006A        delay_ms(100);
                 ; 0000 006B 
                 ; 0000 006C 
                 ; 0000 006D       //////////////////////////////////
                 ; 0000 006E 
                 ; 0000 006F       Counterm=(overflowm*256)+TCNT0;
00015a 91e0 0186 	LDS  R30,_overflowm
00015c 91f0 0187 	LDS  R31,_overflowm+1
00015e 9160 0188 	LDS  R22,_overflowm+2
000160 9170 0189 	LDS  R23,_overflowm+3
000162 940e 0388 	CALL SUBOPT_0x2
000164 93e0 018e 	STS  _Counterm,R30
000166 93f0 018f 	STS  _Counterm+1,R31
000168 9360 0190 	STS  _Counterm+2,R22
00016a 9370 0191 	STS  _Counterm+3,R23
                 ; 0000 0070       distancem=(Counterm/2)*34.32 ;
00016c 940e 05ca 	CALL __LSRD1
00016e 940e 047e 	CALL __CDF1U
                +
000170 eaae     +LDI R26 , LOW ( 0x420947AE )
000171 e4b7     +LDI R27 , HIGH ( 0x420947AE )
000172 e089     +LDI R24 , BYTE3 ( 0x420947AE )
000173 e492     +LDI R25 , BYTE4 ( 0x420947AE )
                 	__GETD2N 0x420947AE
000174 940e 050a 	CALL __MULF12
000176 93e0 0196 	STS  _distancem,R30
000178 93f0 0197 	STS  _distancem+1,R31
00017a 9360 0198 	STS  _distancem+2,R22
00017c 9370 0199 	STS  _distancem+3,R23
                 ; 0000 0071 
                 ; 0000 0072       if (Counter>30001)
00017e 940e 0397 	CALL SUBOPT_0x3
                +
000180 33a2     +CPI R26 , LOW ( 0x7532 )
000181 e7e5     +LDI R30 , HIGH ( 0x7532 )
000182 07be     +CPC R27 , R30
000183 e0e0     +LDI R30 , BYTE3 ( 0x7532 )
000184 078e     +CPC R24 , R30
000185 e0e0     +LDI R30 , BYTE4 ( 0x7532 )
000186 079e     +CPC R25 , R30
                 	__CPD2N 0x7532
000187 f098      	BRLO _0x16
                 ; 0000 0073       {
                 ; 0000 0074        lcd_clear();
000188 d063      	RCALL _lcd_clear
                 ; 0000 0075        lcd_gotoxy(0,0);
000189 940e 037f 	CALL SUBOPT_0x0
                 ; 0000 0076        lcd_putsf("distance=");
00018b 940e 03a8 	CALL SUBOPT_0x5
                 ; 0000 0077        lcd_gotoxy(9,0);
                 ; 0000 0078        ftoa(distancem,1,lcd);
00018d 91e0 0196 	LDS  R30,_distancem
00018f 91f0 0197 	LDS  R31,_distancem+1
000191 9160 0198 	LDS  R22,_distancem+2
000193 9170 0199 	LDS  R23,_distancem+3
000195 940e 03ae 	CALL SUBOPT_0x6
                 ; 0000 0079        lcd_puts(lcd);
                 ; 0000 007A        lcd_putsf("m");
                +
000197 e8a9     +LDI R26 , LOW ( 2 * _0x0 + ( 45 ) )
000198 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 45 ) )
                 	__POINTW2FN _0x0,45
000199 940e 03ba 	CALL SUBOPT_0x7
                 ; 0000 007B        delay_ms(100);
                 ; 0000 007C       }
                 ; 0000 007D       }
                 _0x16:
                 ; 0000 007E       if (Counter>30000)
                 _0x14:
00019b 940e 0397 	CALL SUBOPT_0x3
                +
00019d 33a1     +CPI R26 , LOW ( 0x7531 )
00019e e7e5     +LDI R30 , HIGH ( 0x7531 )
00019f 07be     +CPC R27 , R30
0001a0 e0e0     +LDI R30 , BYTE3 ( 0x7531 )
0001a1 078e     +CPC R24 , R30
0001a2 e0e0     +LDI R30 , BYTE4 ( 0x7531 )
0001a3 079e     +CPC R25 , R30
                 	__CPD2N 0x7531
0001a4 f048      	BRLO _0x17
                 ; 0000 007F       {
                 ; 0000 0080       PORTC.0=1;
0001a5 9aa8      	SBI  0x15,0
                 ; 0000 0081       lcd_gotoxy(2,1);
0001a6 e0e2      	LDI  R30,LOW(2)
0001a7 93ea      	ST   -Y,R30
0001a8 e0a1      	LDI  R26,LOW(1)
0001a9 d035      	RCALL _lcd_gotoxy
                 ; 0000 0082       lcd_putsf("out of range    ");
                +
0001aa e8ab     +LDI R26 , LOW ( 2 * _0x0 + ( 47 ) )
0001ab e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 47 ) )
                 	__POINTW2FN _0x0,47
0001ac 940e 03ba 	CALL SUBOPT_0x7
                 ; 0000 0083       delay_ms(100);
                 ; 0000 0084       }
                 ; 0000 0085       if (Counter<30000)
                 _0x17:
0001ae 940e 0397 	CALL SUBOPT_0x3
0001b0 940e 03a0 	CALL SUBOPT_0x4
0001b2 f410      	BRSH _0x1A
                 ; 0000 0086       {
                 ; 0000 0087       lcd_clear();
0001b3 d038      	RCALL _lcd_clear
                 ; 0000 0088       PORTC.0=0;
0001b4 98a8      	CBI  0x15,0
                 ; 0000 0089       }
                 ; 0000 008A      }
                 _0x1A:
0001b5 cf4a      	RJMP _0x7
                 ; 0000 008B }
                 _0x1D:
0001b6 cfff      	RJMP _0x1D
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
000160           	.BYTE 0x22
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001b7 93aa      	ST   -Y,R26
0001b8 b3e2      	IN   R30,0x12
0001b9 70ef      	ANDI R30,LOW(0xF)
0001ba 2fae      	MOV  R26,R30
0001bb 81e8      	LD   R30,Y
0001bc 7fe0      	ANDI R30,LOW(0xF0)
0001bd 2bea      	OR   R30,R26
0001be bbe2      	OUT  0x12,R30
                +
0001bf e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001c0 958a     +DEC R24
0001c1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001c2 9a92      	SBI  0x12,2
                +
0001c3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001c4 958a     +DEC R24
0001c5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001c6 9892      	CBI  0x12,2
                +
0001c7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001c8 958a     +DEC R24
0001c9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001ca c090      	RJMP _0x20A0004
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001cb 93aa      	ST   -Y,R26
0001cc 81a8      	LD   R26,Y
0001cd dfe9      	RCALL __lcd_write_nibble_G100
0001ce 81e8          ld    r30,y
0001cf 95e2          swap  r30
0001d0 83e8          st    y,r30
0001d1 81a8      	LD   R26,Y
0001d2 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001d3 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001d4 958a     +DEC R24
0001d5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001d6 c084      	RJMP _0x20A0004
                 ; .FEND
                 _lcd_write_byte:
                 ; .FSTART _lcd_write_byte
0001d7 93aa      	ST   -Y,R26
0001d8 81a9      	LDD  R26,Y+1
0001d9 dff1      	RCALL __lcd_write_data
0001da 9a90      	SBI  0x12,0
0001db 81a8      	LD   R26,Y
0001dc dfee      	RCALL __lcd_write_data
0001dd 9890      	CBI  0x12,0
0001de c00b      	RJMP _0x20A0006
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001df 93aa      	ST   -Y,R26
0001e0 81e8      	LD   R30,Y
0001e1 e0f0      	LDI  R31,0
0001e2 55e6      	SUBI R30,LOW(-__base_y_G100)
0001e3 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001e4 81e0      	LD   R30,Z
0001e5 81a9      	LDD  R26,Y+1
0001e6 0fae      	ADD  R26,R30
0001e7 dfe3      	RCALL __lcd_write_data
0001e8 8059      	LDD  R5,Y+1
0001e9 8048      	LDD  R4,Y+0
                 _0x20A0006:
0001ea 9622      	ADIW R28,2
0001eb 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001ec e0a2      	LDI  R26,LOW(2)
0001ed 940e 03c0 	CALL SUBOPT_0x8
0001ef e0ac      	LDI  R26,LOW(12)
0001f0 dfda      	RCALL __lcd_write_data
0001f1 e0a1      	LDI  R26,LOW(1)
0001f2 940e 03c0 	CALL SUBOPT_0x8
0001f4 e0e0      	LDI  R30,LOW(0)
0001f5 2e4e      	MOV  R4,R30
0001f6 2e5e      	MOV  R5,R30
0001f7 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001f8 93aa      	ST   -Y,R26
0001f9 81a8      	LD   R26,Y
0001fa 30aa      	CPI  R26,LOW(0xA)
0001fb f011      	BREQ _0x2000005
0001fc 1457      	CP   R5,R7
0001fd f048      	BRLO _0x2000004
                 _0x2000005:
0001fe e0e0      	LDI  R30,LOW(0)
0001ff 93ea      	ST   -Y,R30
000200 9443      	INC  R4
000201 2da4      	MOV  R26,R4
000202 dfdc      	RCALL _lcd_gotoxy
000203 81a8      	LD   R26,Y
000204 30aa      	CPI  R26,LOW(0xA)
000205 f409      	BRNE _0x2000007
000206 c054      	RJMP _0x20A0004
                 _0x2000007:
                 _0x2000004:
000207 9453      	INC  R5
000208 9a90      	SBI  0x12,0
000209 81a8      	LD   R26,Y
00020a dfc0      	RCALL __lcd_write_data
00020b 9890      	CBI  0x12,0
00020c c04e      	RJMP _0x20A0004
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00020d 93ba      	ST   -Y,R27
00020e 93aa      	ST   -Y,R26
00020f 931a      	ST   -Y,R17
                 _0x2000008:
000210 81a9      	LDD  R26,Y+1
000211 81ba      	LDD  R27,Y+1+1
000212 91ed      	LD   R30,X+
000213 83a9      	STD  Y+1,R26
000214 83ba      	STD  Y+1+1,R27
000215 2f1e      	MOV  R17,R30
000216 30e0      	CPI  R30,0
000217 f019      	BREQ _0x200000A
000218 2fa1      	MOV  R26,R17
000219 dfde      	RCALL _lcd_putchar
00021a cff5      	RJMP _0x2000008
                 _0x200000A:
00021b c010      	RJMP _0x20A0005
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00021c 93ba      	ST   -Y,R27
00021d 93aa      	ST   -Y,R26
00021e 931a      	ST   -Y,R17
                 _0x200000B:
00021f 81e9      	LDD  R30,Y+1
000220 81fa      	LDD  R31,Y+1+1
000221 9631      	ADIW R30,1
000222 83e9      	STD  Y+1,R30
000223 83fa      	STD  Y+1+1,R31
000224 9731      	SBIW R30,1
000225 91e4      	LPM  R30,Z
000226 2f1e      	MOV  R17,R30
000227 30e0      	CPI  R30,0
000228 f019      	BREQ _0x200000D
000229 2fa1      	MOV  R26,R17
00022a dfcd      	RCALL _lcd_putchar
00022b cff3      	RJMP _0x200000B
                 _0x200000D:
                 _0x20A0005:
00022c 8118      	LDD  R17,Y+0
00022d 9623      	ADIW R28,3
00022e 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00022f 93aa      	ST   -Y,R26
000230 b3e1      	IN   R30,0x11
000231 6fe0      	ORI  R30,LOW(0xF0)
000232 bbe1      	OUT  0x11,R30
000233 9a8a      	SBI  0x11,2
000234 9a88      	SBI  0x11,0
000235 9a89      	SBI  0x11,1
000236 9892      	CBI  0x12,2
000237 9890      	CBI  0x12,0
000238 9891      	CBI  0x12,1
000239 8078      	LDD  R7,Y+0
00023a 81e8      	LD   R30,Y
00023b 58e0      	SUBI R30,-LOW(128)
                +
00023c 93e0 01ac+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00023e 81e8      	LD   R30,Y
00023f 54e0      	SUBI R30,-LOW(192)
                +
000240 93e0 01ad+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000242 e1a4      	LDI  R26,LOW(20)
000243 e0b0      	LDI  R27,0
000244 940e 040a 	CALL _delay_ms
000246 940e 03c6 	CALL SUBOPT_0x9
000248 940e 03c6 	CALL SUBOPT_0x9
00024a 940e 03c6 	CALL SUBOPT_0x9
00024c e2a0      	LDI  R26,LOW(32)
00024d df69      	RCALL __lcd_write_nibble_G100
                +
00024e ec88     +LDI R24 , LOW ( 200 )
00024f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000250 9701     +SBIW R24 , 1
000251 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000252 e2a8      	LDI  R26,LOW(40)
000253 df77      	RCALL __lcd_write_data
000254 e0a4      	LDI  R26,LOW(4)
000255 df75      	RCALL __lcd_write_data
000256 e8a5      	LDI  R26,LOW(133)
000257 df73      	RCALL __lcd_write_data
000258 e0a6      	LDI  R26,LOW(6)
000259 df71      	RCALL __lcd_write_data
00025a df91      	RCALL _lcd_clear
                 _0x20A0004:
00025b 9621      	ADIW R28,1
00025c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
00025d 93ba      	ST   -Y,R27
00025e 93aa      	ST   -Y,R26
00025f 9724      	SBIW R28,4
000260 e0e0      	LDI  R30,LOW(0)
000261 83e8      	ST   Y,R30
000262 83e9      	STD  Y+1,R30
000263 83ea      	STD  Y+2,R30
000264 e3ef      	LDI  R30,LOW(63)
000265 83eb      	STD  Y+3,R30
000266 931a      	ST   -Y,R17
000267 930a      	ST   -Y,R16
000268 85eb      	LDD  R30,Y+11
000269 85fc      	LDD  R31,Y+11+1
00026a 3fef      	CPI  R30,LOW(0xFFFF)
00026b efaf      	LDI  R26,HIGH(0xFFFF)
00026c 07fa      	CPC  R31,R26
00026d f439      	BRNE _0x202000D
00026e 940e 03ce 	CALL SUBOPT_0xA
                +
000270 eaa0     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
000271 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
000272 940e 0372 	CALL _strcpyf
000274 c0b1      	RJMP _0x20A0003
                 _0x202000D:
000275 3fef      	CPI  R30,LOW(0x7FFF)
000276 e7af      	LDI  R26,HIGH(0x7FFF)
000277 07fa      	CPC  R31,R26
000278 f439      	BRNE _0x202000C
000279 940e 03ce 	CALL SUBOPT_0xA
                +
00027b eaa1     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
00027c e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
00027d 940e 0372 	CALL _strcpyf
00027f c0a6      	RJMP _0x20A0003
                 _0x202000C:
000280 85ac      	LDD  R26,Y+12
000281 23aa      	TST  R26
000282 f462      	BRPL _0x202000F
                +
000283 85e9     +LDD R30 , Y + 9
000284 85fa     +LDD R31 , Y + 9 + 1
000285 856b     +LDD R22 , Y + 9 + 2
000286 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000287 940e 0414 	CALL __ANEGF1
000289 940e 03d3 	CALL SUBOPT_0xB
00028b 940e 03d8 	CALL SUBOPT_0xC
00028d e2ed      	LDI  R30,LOW(45)
00028e 93ec      	ST   X,R30
                 _0x202000F:
00028f 85a8      	LDD  R26,Y+8
000290 30a7      	CPI  R26,LOW(0x7)
000291 f010      	BRLO _0x2020010
000292 e0e6      	LDI  R30,LOW(6)
000293 87e8      	STD  Y+8,R30
                 _0x2020010:
000294 8518      	LDD  R17,Y+8
                 _0x2020011:
000295 2fe1      	MOV  R30,R17
000296 5011      	SUBI R17,1
000297 30e0      	CPI  R30,0
000298 f039      	BREQ _0x2020013
000299 940e 03df 	CALL SUBOPT_0xD
00029b 940e 03e4 	CALL SUBOPT_0xE
00029d 940e 03eb 	CALL SUBOPT_0xF
00029f cff5      	RJMP _0x2020011
                 _0x2020013:
0002a0 940e 03f0 	CALL SUBOPT_0x10
0002a2 940e 04ba 	CALL __ADDF12
0002a4 940e 03d3 	CALL SUBOPT_0xB
0002a6 e010      	LDI  R17,LOW(0)
                +
0002a7 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0002a8 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0002a9 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0002aa e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0002ab 940e 03eb 	CALL SUBOPT_0xF
                 _0x2020014:
0002ad 940e 03f0 	CALL SUBOPT_0x10
0002af 940e 059d 	CALL __CMPF12
0002b1 f088      	BRLO _0x2020016
0002b2 940e 03df 	CALL SUBOPT_0xD
0002b4 940e 03f9 	CALL SUBOPT_0x11
0002b6 940e 03eb 	CALL SUBOPT_0xF
0002b8 5f1f      	SUBI R17,-LOW(1)
0002b9 3217      	CPI  R17,39
0002ba f038      	BRLO _0x2020017
0002bb 940e 03ce 	CALL SUBOPT_0xA
                +
0002bd eaa5     +LDI R26 , LOW ( 2 * _0x2020000 + ( 5 ) )
0002be e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 5 ) )
                 	__POINTW2FN _0x2020000,5
0002bf 940e 0372 	CALL _strcpyf
0002c1 c064      	RJMP _0x20A0003
                 _0x2020017:
0002c2 cfea      	RJMP _0x2020014
                 _0x2020016:
0002c3 3010      	CPI  R17,0
0002c4 f429      	BRNE _0x2020018
0002c5 940e 03d8 	CALL SUBOPT_0xC
0002c7 e3e0      	LDI  R30,LOW(48)
0002c8 93ec      	ST   X,R30
0002c9 c02f      	RJMP _0x2020019
                 _0x2020018:
                 _0x202001A:
0002ca 2fe1      	MOV  R30,R17
0002cb 5011      	SUBI R17,1
0002cc 30e0      	CPI  R30,0
0002cd f159      	BREQ _0x202001C
0002ce 940e 03df 	CALL SUBOPT_0xD
0002d0 940e 03e4 	CALL SUBOPT_0xE
                +
0002d2 e0a0     +LDI R26 , LOW ( 0x3F000000 )
0002d3 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0002d4 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0002d5 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0002d6 940e 04ba 	CALL __ADDF12
0002d8 01df      	MOVW R26,R30
0002d9 01cb      	MOVW R24,R22
0002da 940e 035b 	CALL _floor
0002dc 940e 03eb 	CALL SUBOPT_0xF
0002de 940e 03f0 	CALL SUBOPT_0x10
0002e0 940e 0558 	CALL __DIVF21
0002e2 940e 0447 	CALL __CFD1U
0002e4 2f0e      	MOV  R16,R30
0002e5 940e 03d8 	CALL SUBOPT_0xC
0002e7 2fe0      	MOV  R30,R16
0002e8 5de0      	SUBI R30,-LOW(48)
0002e9 93ec      	ST   X,R30
0002ea 2fe0      	MOV  R30,R16
0002eb e0f0      	LDI  R31,0
0002ec 940e 03df 	CALL SUBOPT_0xD
0002ee 940e 05cf 	CALL __CWD1
0002f0 940e 0480 	CALL __CDF1
0002f2 940e 050a 	CALL __MULF12
0002f4 940e 0400 	CALL SUBOPT_0x12
0002f6 940e 0405 	CALL SUBOPT_0x13
0002f8 cfd1      	RJMP _0x202001A
                 _0x202001C:
                 _0x2020019:
0002f9 85e8      	LDD  R30,Y+8
0002fa 30e0      	CPI  R30,0
0002fb f131      	BREQ _0x20A0002
0002fc 940e 03d8 	CALL SUBOPT_0xC
0002fe e2ee      	LDI  R30,LOW(46)
0002ff 93ec      	ST   X,R30
                 _0x202001E:
000300 85e8      	LDD  R30,Y+8
000301 50e1      	SUBI R30,LOW(1)
000302 87e8      	STD  Y+8,R30
000303 5fef      	SUBI R30,-LOW(1)
000304 f0e9      	BREQ _0x2020020
000305 940e 0400 	CALL SUBOPT_0x12
000307 940e 03f9 	CALL SUBOPT_0x11
000309 940e 03d3 	CALL SUBOPT_0xB
                +
00030b 85e9     +LDD R30 , Y + 9
00030c 85fa     +LDD R31 , Y + 9 + 1
00030d 856b     +LDD R22 , Y + 9 + 2
00030e 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
00030f 940e 0447 	CALL __CFD1U
000311 2f0e      	MOV  R16,R30
000312 940e 03d8 	CALL SUBOPT_0xC
000314 2fe0      	MOV  R30,R16
000315 5de0      	SUBI R30,-LOW(48)
000316 93ec      	ST   X,R30
000317 2fe0      	MOV  R30,R16
000318 e0f0      	LDI  R31,0
000319 940e 0400 	CALL SUBOPT_0x12
00031b 940e 05cf 	CALL __CWD1
00031d 940e 0480 	CALL __CDF1
00031f 940e 0405 	CALL SUBOPT_0x13
000321 cfde      	RJMP _0x202001E
                 _0x2020020:
                 _0x20A0002:
000322 81ae      	LDD  R26,Y+6
000323 81bf      	LDD  R27,Y+6+1
000324 e0e0      	LDI  R30,LOW(0)
000325 93ec      	ST   X,R30
                 _0x20A0003:
000326 8119      	LDD  R17,Y+1
000327 8108      	LDD  R16,Y+0
000328 962d      	ADIW R28,13
000329 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
00032a 940e 062a 	CALL __PUTPARD2
00032c 817b         ldd  r23,y+3
00032d 816a         ldd  r22,y+2
00032e 81f9         ldd  r31,y+1
00032f 81e8         ld   r30,y
000330 fb77         bst  r23,7
000331 0f77         lsl  r23
000332 fd67         sbrc r22,7
000333 6071         sbr  r23,1
000334 2f97         mov  r25,r23
000335 579e         subi r25,0x7e
000336 f081         breq __ftrunc0
000337 f078         brcs __ftrunc0
000338 3198         cpi  r25,24
000339 f490         brsh __ftrunc1
00033a 27aa         clr  r26
00033b 27bb         clr  r27
00033c 2788         clr  r24
                 __ftrunc2:
00033d 9408         sec
00033e 9587         ror  r24
00033f 95b7         ror  r27
000340 95a7         ror  r26
000341 959a         dec  r25
000342 f7d1         brne __ftrunc2
000343 23ea         and  r30,r26
000344 23fb         and  r31,r27
000345 2368         and  r22,r24
000346 c005         rjmp __ftrunc1
                 __ftrunc0:
000347 94e8         clt
000348 2777         clr  r23
000349 27ee         clr  r30
00034a 27ff         clr  r31
00034b 2766         clr  r22
                 __ftrunc1:
00034c 776f         cbr  r22,0x80
00034d 9576         lsr  r23
00034e f408         brcc __ftrunc3
00034f 6860         sbr  r22,0x80
                 __ftrunc3:
000350 f977         bld  r23,7
000351 91a9         ld   r26,y+
000352 91b9         ld   r27,y+
000353 9189         ld   r24,y+
000354 9199         ld   r25,y+
000355 17ea         cp   r30,r26
000356 07fb         cpc  r31,r27
000357 0768         cpc  r22,r24
000358 0779         cpc  r23,r25
000359 fb97         bst  r25,7
00035a 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
00035b 940e 062a 	CALL __PUTPARD2
00035d 940e 061b 	CALL __GETD2S0
00035f 940e 032a 	CALL _ftrunc
000361 940e 0620 	CALL __PUTD1S0
000363 f419          brne __floor1
                 __floor0:
000364 940e 0616 	CALL __GETD1S0
000366 c009      	RJMP _0x20A0001
                 __floor1:
000367 f7e6          brtc __floor0
000368 940e 0616 	CALL __GETD1S0
                +
00036a e0a0     +LDI R26 , LOW ( 0x3F800000 )
00036b e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00036c e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00036d e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00036e 940e 04b3 	CALL __SUBF12
                 _0x20A0001:
000370 9624      	ADIW R28,4
000371 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
000372 93ba      	ST   -Y,R27
000373 93aa      	ST   -Y,R26
000374 91e9          ld   r30,y+
000375 91f9          ld   r31,y+
000376 91a9          ld   r26,y+
000377 91b9          ld   r27,y+
000378 01cd          movw r24,r26
                 strcpyf0:
000379 9005      	lpm  r0,z+
00037a 920d          st   x+,r0
00037b 2000          tst  r0
00037c f7e1          brne strcpyf0
00037d 01fc          movw r30,r24
00037e 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _overflow:
000182           	.BYTE 0x4
                 _overflowm:
000186           	.BYTE 0x4
                 _Counter:
00018a           	.BYTE 0x4
                 _Counterm:
00018e           	.BYTE 0x4
                 _distance:
000192           	.BYTE 0x4
                 _distancem:
000196           	.BYTE 0x4
                 _lcd:
00019a           	.BYTE 0x10
                 __base_y_G100:
0001aa           	.BYTE 0x4
                 __seed_G101:
0001ae           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
00037f e0e0      	LDI  R30,LOW(0)
000380 93ea      	ST   -Y,R30
000381 e0a0      	LDI  R26,LOW(0)
000382 940c 01df 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000384 93ea      	ST   -Y,R30
000385 e0a0      	LDI  R26,LOW(0)
000386 940c 01df 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
                +
000388 e0a0     +LDI R26 , LOW ( 0x100 )
000389 e0b1     +LDI R27 , HIGH ( 0x100 )
00038a e080     +LDI R24 , BYTE3 ( 0x100 )
00038b e090     +LDI R25 , BYTE4 ( 0x100 )
                 	__GETD2N 0x100
00038c 940e 05f4 	CALL __MULD12
00038e 01df      	MOVW R26,R30
00038f 01cb      	MOVW R24,R22
000390 b7e2      	IN   R30,0x32
000391 e0f0      	LDI  R31,0
000392 940e 05cf 	CALL __CWD1
000394 940e 05bd 	CALL __ADDD12
000396 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3:
000397 91a0 018a 	LDS  R26,_Counter
000399 91b0 018b 	LDS  R27,_Counter+1
00039b 9180 018c 	LDS  R24,_Counter+2
00039d 9190 018d 	LDS  R25,_Counter+3
00039f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
                +
0003a0 33a0     +CPI R26 , LOW ( 0x7530 )
0003a1 e7e5     +LDI R30 , HIGH ( 0x7530 )
0003a2 07be     +CPC R27 , R30
0003a3 e0e0     +LDI R30 , BYTE3 ( 0x7530 )
0003a4 078e     +CPC R24 , R30
0003a5 e0e0     +LDI R30 , BYTE4 ( 0x7530 )
0003a6 079e     +CPC R25 , R30
                 	__CPD2N 0x7530
0003a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
                +
0003a8 e7ae     +LDI R26 , LOW ( 2 * _0x0 + ( 34 ) )
0003a9 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 34 ) )
                 	__POINTW2FN _0x0,34
0003aa 940e 021c 	CALL _lcd_putsf
0003ac e0e9      	LDI  R30,LOW(9)
0003ad cfd6      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0003ae 940e 0625 	CALL __PUTPARD1
0003b0 e0e1      	LDI  R30,LOW(1)
0003b1 93ea      	ST   -Y,R30
0003b2 e9aa      	LDI  R26,LOW(_lcd)
0003b3 e0b1      	LDI  R27,HIGH(_lcd)
0003b4 940e 025d 	CALL _ftoa
0003b6 e9aa      	LDI  R26,LOW(_lcd)
0003b7 e0b1      	LDI  R27,HIGH(_lcd)
0003b8 940c 020d 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0003ba 940e 021c 	CALL _lcd_putsf
0003bc e6a4      	LDI  R26,LOW(100)
0003bd e0b0      	LDI  R27,0
0003be 940c 040a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0003c0 940e 01cb 	CALL __lcd_write_data
0003c2 e0a3      	LDI  R26,LOW(3)
0003c3 e0b0      	LDI  R27,0
0003c4 940c 040a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
0003c6 e3a0      	LDI  R26,LOW(48)
0003c7 940e 01b7 	CALL __lcd_write_nibble_G100
                +
0003c9 ec88     +LDI R24 , LOW ( 200 )
0003ca e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003cb 9701     +SBIW R24 , 1
0003cc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0003ce 81ee      	LDD  R30,Y+6
0003cf 81ff      	LDD  R31,Y+6+1
0003d0 93fa      	ST   -Y,R31
0003d1 93ea      	ST   -Y,R30
0003d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
                +
0003d3 87e9     +STD Y + 9 , R30
0003d4 87fa     +STD Y + 9 + 1 , R31
0003d5 876b     +STD Y + 9 + 2 , R22
0003d6 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
0003d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xC:
0003d8 81ae      	LDD  R26,Y+6
0003d9 81bf      	LDD  R27,Y+6+1
0003da 9611      	ADIW R26,1
0003db 83ae      	STD  Y+6,R26
0003dc 83bf      	STD  Y+6+1,R27
0003dd 9711      	SBIW R26,1
0003de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
                +
0003df 81aa     +LDD R26 , Y + 2
0003e0 81bb     +LDD R27 , Y + 2 + 1
0003e1 818c     +LDD R24 , Y + 2 + 2
0003e2 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0003e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
                +
0003e4 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0003e5 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0003e6 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0003e7 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0003e8 940e 050a 	CALL __MULF12
0003ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
                +
0003eb 83ea     +STD Y + 2 , R30
0003ec 83fb     +STD Y + 2 + 1 , R31
0003ed 836c     +STD Y + 2 + 2 , R22
0003ee 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0003ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x10:
                +
0003f0 81ea     +LDD R30 , Y + 2
0003f1 81fb     +LDD R31 , Y + 2 + 1
0003f2 816c     +LDD R22 , Y + 2 + 2
0003f3 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0003f4 85a9     +LDD R26 , Y + 9
0003f5 85ba     +LDD R27 , Y + 9 + 1
0003f6 858b     +LDD R24 , Y + 9 + 2
0003f7 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0003f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
                +
0003f9 e0e0     +LDI R30 , LOW ( 0x41200000 )
0003fa e0f0     +LDI R31 , HIGH ( 0x41200000 )
0003fb e260     +LDI R22 , BYTE3 ( 0x41200000 )
0003fc e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0003fd 940e 050a 	CALL __MULF12
0003ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
                +
000400 85a9     +LDD R26 , Y + 9
000401 85ba     +LDD R27 , Y + 9 + 1
000402 858b     +LDD R24 , Y + 9 + 2
000403 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000404 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000405 940e 062f 	CALL __SWAPD12
000407 940e 04b3 	CALL __SUBF12
000409 cfc9      	RJMP SUBOPT_0xB
                 
                 
                 	.CSEG
                 _delay_ms:
00040a 9610      	adiw r26,0
00040b f039      	breq __delay_ms1
                 __delay_ms0:
                +
00040c ed80     +LDI R24 , LOW ( 0x7D0 )
00040d e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00040e 9701     +SBIW R24 , 1
00040f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000410 95a8      	wdr
000411 9711      	sbiw r26,1
000412 f7c9      	brne __delay_ms0
                 __delay_ms1:
000413 9508      	ret
                 
                 __ANEGF1:
000414 9730      	SBIW R30,0
000415 4060      	SBCI R22,0
000416 4070      	SBCI R23,0
000417 f009      	BREQ __ANEGF10
000418 5870      	SUBI R23,0x80
                 __ANEGF10:
000419 9508      	RET
                 
                 __ROUND_REPACK:
00041a 2355      	TST  R21
00041b f442      	BRPL __REPACK
00041c 3850      	CPI  R21,0x80
00041d f411      	BRNE __ROUND_REPACK0
00041e ffe0      	SBRS R30,0
00041f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000420 9631      	ADIW R30,1
000421 1f69      	ADC  R22,R25
000422 1f79      	ADC  R23,R25
000423 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000424 e850      	LDI  R21,0x80
000425 2757      	EOR  R21,R23
000426 f411      	BRNE __REPACK0
000427 935f      	PUSH R21
000428 c0cf      	RJMP __ZERORES
                 __REPACK0:
000429 3f5f      	CPI  R21,0xFF
00042a f031      	BREQ __REPACK1
00042b 0f66      	LSL  R22
00042c 0c00      	LSL  R0
00042d 9557      	ROR  R21
00042e 9567      	ROR  R22
00042f 2f75      	MOV  R23,R21
000430 9508      	RET
                 __REPACK1:
000431 935f      	PUSH R21
000432 2000      	TST  R0
000433 f00a      	BRMI __REPACK2
000434 c0cf      	RJMP __MAXRES
                 __REPACK2:
000435 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000436 e850      	LDI  R21,0x80
000437 2e19      	MOV  R1,R25
000438 2215      	AND  R1,R21
000439 0f88      	LSL  R24
00043a 1f99      	ROL  R25
00043b 2795      	EOR  R25,R21
00043c 0f55      	LSL  R21
00043d 9587      	ROR  R24
                 
                 __UNPACK1:
00043e e850      	LDI  R21,0x80
00043f 2e07      	MOV  R0,R23
000440 2205      	AND  R0,R21
000441 0f66      	LSL  R22
000442 1f77      	ROL  R23
000443 2775      	EOR  R23,R21
000444 0f55      	LSL  R21
000445 9567      	ROR  R22
000446 9508      	RET
                 
                 __CFD1U:
000447 9468      	SET
000448 c001      	RJMP __CFD1U0
                 __CFD1:
000449 94e8      	CLT
                 __CFD1U0:
00044a 935f      	PUSH R21
00044b dff2      	RCALL __UNPACK1
00044c 3870      	CPI  R23,0x80
00044d f018      	BRLO __CFD10
00044e 3f7f      	CPI  R23,0xFF
00044f f408      	BRCC __CFD10
000450 c0a7      	RJMP __ZERORES
                 __CFD10:
000451 e156      	LDI  R21,22
000452 1b57      	SUB  R21,R23
000453 f4aa      	BRPL __CFD11
000454 9551      	NEG  R21
000455 3058      	CPI  R21,8
000456 f40e      	BRTC __CFD19
000457 3059      	CPI  R21,9
                 __CFD19:
000458 f030      	BRLO __CFD17
000459 efef      	SER  R30
00045a efff      	SER  R31
00045b ef6f      	SER  R22
00045c e77f      	LDI  R23,0x7F
00045d f977      	BLD  R23,7
00045e c01a      	RJMP __CFD15
                 __CFD17:
00045f 2777      	CLR  R23
000460 2355      	TST  R21
000461 f0b9      	BREQ __CFD15
                 __CFD18:
000462 0fee      	LSL  R30
000463 1fff      	ROL  R31
000464 1f66      	ROL  R22
000465 1f77      	ROL  R23
000466 955a      	DEC  R21
000467 f7d1      	BRNE __CFD18
000468 c010      	RJMP __CFD15
                 __CFD11:
000469 2777      	CLR  R23
                 __CFD12:
00046a 3058      	CPI  R21,8
00046b f028      	BRLO __CFD13
00046c 2fef      	MOV  R30,R31
00046d 2ff6      	MOV  R31,R22
00046e 2f67      	MOV  R22,R23
00046f 5058      	SUBI R21,8
000470 cff9      	RJMP __CFD12
                 __CFD13:
000471 2355      	TST  R21
000472 f031      	BREQ __CFD15
                 __CFD14:
000473 9576      	LSR  R23
000474 9567      	ROR  R22
000475 95f7      	ROR  R31
000476 95e7      	ROR  R30
000477 955a      	DEC  R21
000478 f7d1      	BRNE __CFD14
                 __CFD15:
000479 2000      	TST  R0
00047a f40a      	BRPL __CFD16
00047b d146      	RCALL __ANEGD1
                 __CFD16:
00047c 915f      	POP  R21
00047d 9508      	RET
                 
                 __CDF1U:
00047e 9468      	SET
00047f c001      	RJMP __CDF1U0
                 __CDF1:
000480 94e8      	CLT
                 __CDF1U0:
000481 9730      	SBIW R30,0
000482 4060      	SBCI R22,0
000483 4070      	SBCI R23,0
000484 f0b1      	BREQ __CDF10
000485 2400      	CLR  R0
000486 f026      	BRTS __CDF11
000487 2377      	TST  R23
000488 f412      	BRPL __CDF11
000489 9400      	COM  R0
00048a d137      	RCALL __ANEGD1
                 __CDF11:
00048b 2e17      	MOV  R1,R23
00048c e17e      	LDI  R23,30
00048d 2011      	TST  R1
                 __CDF12:
00048e f032      	BRMI __CDF13
00048f 957a      	DEC  R23
000490 0fee      	LSL  R30
000491 1fff      	ROL  R31
000492 1f66      	ROL  R22
000493 1c11      	ROL  R1
000494 cff9      	RJMP __CDF12
                 __CDF13:
000495 2fef      	MOV  R30,R31
000496 2ff6      	MOV  R31,R22
000497 2d61      	MOV  R22,R1
000498 935f      	PUSH R21
000499 df8a      	RCALL __REPACK
00049a 915f      	POP  R21
                 __CDF10:
00049b 9508      	RET
                 
                 __SWAPACC:
00049c 934f      	PUSH R20
00049d 01af      	MOVW R20,R30
00049e 01fd      	MOVW R30,R26
00049f 01da      	MOVW R26,R20
0004a0 01ab      	MOVW R20,R22
0004a1 01bc      	MOVW R22,R24
0004a2 01ca      	MOVW R24,R20
0004a3 2d40      	MOV  R20,R0
0004a4 2c01      	MOV  R0,R1
0004a5 2e14      	MOV  R1,R20
0004a6 914f      	POP  R20
0004a7 9508      	RET
                 
                 __UADD12:
0004a8 0fea      	ADD  R30,R26
0004a9 1ffb      	ADC  R31,R27
0004aa 1f68      	ADC  R22,R24
0004ab 9508      	RET
                 
                 __NEGMAN1:
0004ac 95e0      	COM  R30
0004ad 95f0      	COM  R31
0004ae 9560      	COM  R22
0004af 5fef      	SUBI R30,-1
0004b0 4fff      	SBCI R31,-1
0004b1 4f6f      	SBCI R22,-1
0004b2 9508      	RET
                 
                 __SUBF12:
0004b3 935f      	PUSH R21
0004b4 df81      	RCALL __UNPACK
0004b5 3890      	CPI  R25,0x80
0004b6 f171      	BREQ __ADDF129
0004b7 e850      	LDI  R21,0x80
0004b8 2615      	EOR  R1,R21
                 
0004b9 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0004ba 935f      	PUSH R21
0004bb df7a      	RCALL __UNPACK
0004bc 3890      	CPI  R25,0x80
0004bd f139      	BREQ __ADDF129
                 
                 __ADDF120:
0004be 3870      	CPI  R23,0x80
0004bf f121      	BREQ __ADDF128
                 __ADDF121:
0004c0 2f57      	MOV  R21,R23
0004c1 1b59      	SUB  R21,R25
0004c2 f12b      	BRVS __ADDF1211
0004c3 f412      	BRPL __ADDF122
0004c4 dfd7      	RCALL __SWAPACC
0004c5 cffa      	RJMP __ADDF121
                 __ADDF122:
0004c6 3158      	CPI  R21,24
0004c7 f018      	BRLO __ADDF123
0004c8 27aa      	CLR  R26
0004c9 27bb      	CLR  R27
0004ca 2788      	CLR  R24
                 __ADDF123:
0004cb 3058      	CPI  R21,8
0004cc f028      	BRLO __ADDF124
0004cd 2fab      	MOV  R26,R27
0004ce 2fb8      	MOV  R27,R24
0004cf 2788      	CLR  R24
0004d0 5058      	SUBI R21,8
0004d1 cff9      	RJMP __ADDF123
                 __ADDF124:
0004d2 2355      	TST  R21
0004d3 f029      	BREQ __ADDF126
                 __ADDF125:
0004d4 9586      	LSR  R24
0004d5 95b7      	ROR  R27
0004d6 95a7      	ROR  R26
0004d7 955a      	DEC  R21
0004d8 f7d9      	BRNE __ADDF125
                 __ADDF126:
0004d9 2d50      	MOV  R21,R0
0004da 2551      	EOR  R21,R1
0004db f072      	BRMI __ADDF127
0004dc dfcb      	RCALL __UADD12
0004dd f438      	BRCC __ADDF129
0004de 9567      	ROR  R22
0004df 95f7      	ROR  R31
0004e0 95e7      	ROR  R30
0004e1 9573      	INC  R23
0004e2 f413      	BRVC __ADDF129
0004e3 c020      	RJMP __MAXRES
                 __ADDF128:
0004e4 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0004e5 df3e      	RCALL __REPACK
0004e6 915f      	POP  R21
0004e7 9508      	RET
                 __ADDF1211:
0004e8 f7d8      	BRCC __ADDF128
0004e9 cffb      	RJMP __ADDF129
                 __ADDF127:
0004ea 1bea      	SUB  R30,R26
0004eb 0bfb      	SBC  R31,R27
0004ec 0b68      	SBC  R22,R24
0004ed f051      	BREQ __ZERORES
0004ee f410      	BRCC __ADDF1210
0004ef 9400      	COM  R0
0004f0 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0004f1 2366      	TST  R22
0004f2 f392      	BRMI __ADDF129
0004f3 0fee      	LSL  R30
0004f4 1fff      	ROL  R31
0004f5 1f66      	ROL  R22
0004f6 957a      	DEC  R23
0004f7 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0004f8 27ee      	CLR  R30
0004f9 27ff      	CLR  R31
0004fa 2766      	CLR  R22
0004fb 2777      	CLR  R23
0004fc 915f      	POP  R21
0004fd 9508      	RET
                 
                 __MINRES:
0004fe efef      	SER  R30
0004ff efff      	SER  R31
000500 e76f      	LDI  R22,0x7F
000501 ef7f      	SER  R23
000502 915f      	POP  R21
000503 9508      	RET
                 
                 __MAXRES:
000504 efef      	SER  R30
000505 efff      	SER  R31
000506 e76f      	LDI  R22,0x7F
000507 e77f      	LDI  R23,0x7F
000508 915f      	POP  R21
000509 9508      	RET
                 
                 __MULF12:
00050a 935f      	PUSH R21
00050b df2a      	RCALL __UNPACK
00050c 3870      	CPI  R23,0x80
00050d f351      	BREQ __ZERORES
00050e 3890      	CPI  R25,0x80
00050f f341      	BREQ __ZERORES
000510 2401      	EOR  R0,R1
000511 9408      	SEC
000512 1f79      	ADC  R23,R25
000513 f423      	BRVC __MULF124
000514 f31c      	BRLT __ZERORES
                 __MULF125:
000515 2000      	TST  R0
000516 f33a      	BRMI __MINRES
000517 cfec      	RJMP __MAXRES
                 __MULF124:
000518 920f      	PUSH R0
000519 931f      	PUSH R17
00051a 932f      	PUSH R18
00051b 933f      	PUSH R19
00051c 934f      	PUSH R20
00051d 2711      	CLR  R17
00051e 2722      	CLR  R18
00051f 2799      	CLR  R25
000520 9f68      	MUL  R22,R24
000521 01a0      	MOVW R20,R0
000522 9f8f      	MUL  R24,R31
000523 2d30      	MOV  R19,R0
000524 0d41      	ADD  R20,R1
000525 1f59      	ADC  R21,R25
000526 9f6b      	MUL  R22,R27
000527 0d30      	ADD  R19,R0
000528 1d41      	ADC  R20,R1
000529 1f59      	ADC  R21,R25
00052a 9f8e      	MUL  R24,R30
00052b d027      	RCALL __MULF126
00052c 9fbf      	MUL  R27,R31
00052d d025      	RCALL __MULF126
00052e 9f6a      	MUL  R22,R26
00052f d023      	RCALL __MULF126
000530 9fbe      	MUL  R27,R30
000531 d01d      	RCALL __MULF127
000532 9faf      	MUL  R26,R31
000533 d01b      	RCALL __MULF127
000534 9fae      	MUL  R26,R30
000535 0d11      	ADD  R17,R1
000536 1f29      	ADC  R18,R25
000537 1f39      	ADC  R19,R25
000538 1f49      	ADC  R20,R25
000539 1f59      	ADC  R21,R25
00053a 2fe3      	MOV  R30,R19
00053b 2ff4      	MOV  R31,R20
00053c 2f65      	MOV  R22,R21
00053d 2f52      	MOV  R21,R18
00053e 914f      	POP  R20
00053f 913f      	POP  R19
000540 912f      	POP  R18
000541 911f      	POP  R17
000542 900f      	POP  R0
000543 2366      	TST  R22
000544 f02a      	BRMI __MULF122
000545 0f55      	LSL  R21
000546 1fee      	ROL  R30
000547 1fff      	ROL  R31
000548 1f66      	ROL  R22
000549 c002      	RJMP __MULF123
                 __MULF122:
00054a 9573      	INC  R23
00054b f24b      	BRVS __MULF125
                 __MULF123:
00054c decd      	RCALL __ROUND_REPACK
00054d 915f      	POP  R21
00054e 9508      	RET
                 
                 __MULF127:
00054f 0d10      	ADD  R17,R0
000550 1d21      	ADC  R18,R1
000551 1f39      	ADC  R19,R25
000552 c002      	RJMP __MULF128
                 __MULF126:
000553 0d20      	ADD  R18,R0
000554 1d31      	ADC  R19,R1
                 __MULF128:
000555 1f49      	ADC  R20,R25
000556 1f59      	ADC  R21,R25
000557 9508      	RET
                 
                 __DIVF21:
000558 935f      	PUSH R21
000559 dedc      	RCALL __UNPACK
00055a 3870      	CPI  R23,0x80
00055b f421      	BRNE __DIVF210
00055c 2011      	TST  R1
                 __DIVF211:
00055d f40a      	BRPL __DIVF219
00055e cf9f      	RJMP __MINRES
                 __DIVF219:
00055f cfa4      	RJMP __MAXRES
                 __DIVF210:
000560 3890      	CPI  R25,0x80
000561 f409      	BRNE __DIVF218
                 __DIVF217:
000562 cf95      	RJMP __ZERORES
                 __DIVF218:
000563 2401      	EOR  R0,R1
000564 9408      	SEC
000565 0b97      	SBC  R25,R23
000566 f41b      	BRVC __DIVF216
000567 f3d4      	BRLT __DIVF217
000568 2000      	TST  R0
000569 cff3      	RJMP __DIVF211
                 __DIVF216:
00056a 2f79      	MOV  R23,R25
00056b 931f      	PUSH R17
00056c 932f      	PUSH R18
00056d 933f      	PUSH R19
00056e 934f      	PUSH R20
00056f 2411      	CLR  R1
000570 2711      	CLR  R17
000571 2722      	CLR  R18
000572 2733      	CLR  R19
000573 2744      	CLR  R20
000574 2755      	CLR  R21
000575 e290      	LDI  R25,32
                 __DIVF212:
000576 17ae      	CP   R26,R30
000577 07bf      	CPC  R27,R31
000578 0786      	CPC  R24,R22
000579 0741      	CPC  R20,R17
00057a f030      	BRLO __DIVF213
00057b 1bae      	SUB  R26,R30
00057c 0bbf      	SBC  R27,R31
00057d 0b86      	SBC  R24,R22
00057e 0b41      	SBC  R20,R17
00057f 9408      	SEC
000580 c001      	RJMP __DIVF214
                 __DIVF213:
000581 9488      	CLC
                 __DIVF214:
000582 1f55      	ROL  R21
000583 1f22      	ROL  R18
000584 1f33      	ROL  R19
000585 1c11      	ROL  R1
000586 1faa      	ROL  R26
000587 1fbb      	ROL  R27
000588 1f88      	ROL  R24
000589 1f44      	ROL  R20
00058a 959a      	DEC  R25
00058b f751      	BRNE __DIVF212
00058c 01f9      	MOVW R30,R18
00058d 2d61      	MOV  R22,R1
00058e 914f      	POP  R20
00058f 913f      	POP  R19
000590 912f      	POP  R18
000591 911f      	POP  R17
000592 2366      	TST  R22
000593 f032      	BRMI __DIVF215
000594 0f55      	LSL  R21
000595 1fee      	ROL  R30
000596 1fff      	ROL  R31
000597 1f66      	ROL  R22
000598 957a      	DEC  R23
000599 f243      	BRVS __DIVF217
                 __DIVF215:
00059a de7f      	RCALL __ROUND_REPACK
00059b 915f      	POP  R21
00059c 9508      	RET
                 
                 __CMPF12:
00059d 2399      	TST  R25
00059e f09a      	BRMI __CMPF120
00059f 2377      	TST  R23
0005a0 f042      	BRMI __CMPF121
0005a1 1797      	CP   R25,R23
0005a2 f048      	BRLO __CMPF122
0005a3 f429      	BRNE __CMPF121
0005a4 17ae      	CP   R26,R30
0005a5 07bf      	CPC  R27,R31
0005a6 0786      	CPC  R24,R22
0005a7 f020      	BRLO __CMPF122
0005a8 f031      	BREQ __CMPF123
                 __CMPF121:
0005a9 9498      	CLZ
0005aa 9488      	CLC
0005ab 9508      	RET
                 __CMPF122:
0005ac 9498      	CLZ
0005ad 9408      	SEC
0005ae 9508      	RET
                 __CMPF123:
0005af 9418      	SEZ
0005b0 9488      	CLC
0005b1 9508      	RET
                 __CMPF120:
0005b2 2377      	TST  R23
0005b3 f7c2      	BRPL __CMPF122
0005b4 1797      	CP   R25,R23
0005b5 f398      	BRLO __CMPF121
0005b6 f7a9      	BRNE __CMPF122
0005b7 17ea      	CP   R30,R26
0005b8 07fb      	CPC  R31,R27
0005b9 0768      	CPC  R22,R24
0005ba f388      	BRLO __CMPF122
0005bb f399      	BREQ __CMPF123
0005bc cfec      	RJMP __CMPF121
                 
                 __ADDD12:
0005bd 0fea      	ADD  R30,R26
0005be 1ffb      	ADC  R31,R27
0005bf 1f68      	ADC  R22,R24
0005c0 1f79      	ADC  R23,R25
0005c1 9508      	RET
                 
                 __ANEGD1:
0005c2 95f0      	COM  R31
0005c3 9560      	COM  R22
0005c4 9570      	COM  R23
0005c5 95e1      	NEG  R30
0005c6 4fff      	SBCI R31,-1
0005c7 4f6f      	SBCI R22,-1
0005c8 4f7f      	SBCI R23,-1
0005c9 9508      	RET
                 
                 __LSRD1:
0005ca 9576      	LSR  R23
0005cb 9567      	ROR  R22
0005cc 95f7      	ROR  R31
0005cd 95e7      	ROR  R30
0005ce 9508      	RET
                 
                 __CWD1:
0005cf 2f6f      	MOV  R22,R31
0005d0 0f66      	ADD  R22,R22
0005d1 0b66      	SBC  R22,R22
0005d2 2f76      	MOV  R23,R22
0005d3 9508      	RET
                 
                 __MULD12U:
0005d4 9f7a      	MUL  R23,R26
0005d5 2d70      	MOV  R23,R0
0005d6 9f6b      	MUL  R22,R27
0005d7 0d70      	ADD  R23,R0
0005d8 9ff8      	MUL  R31,R24
0005d9 0d70      	ADD  R23,R0
0005da 9fe9      	MUL  R30,R25
0005db 0d70      	ADD  R23,R0
0005dc 9f6a      	MUL  R22,R26
0005dd 2d60      	MOV  R22,R0
0005de 0d71      	ADD  R23,R1
0005df 9ffb      	MUL  R31,R27
0005e0 0d60      	ADD  R22,R0
0005e1 1d71      	ADC  R23,R1
0005e2 9fe8      	MUL  R30,R24
0005e3 0d60      	ADD  R22,R0
0005e4 1d71      	ADC  R23,R1
0005e5 2788      	CLR  R24
0005e6 9ffa      	MUL  R31,R26
0005e7 2df0      	MOV  R31,R0
0005e8 0d61      	ADD  R22,R1
0005e9 1f78      	ADC  R23,R24
0005ea 9feb      	MUL  R30,R27
0005eb 0df0      	ADD  R31,R0
0005ec 1d61      	ADC  R22,R1
0005ed 1f78      	ADC  R23,R24
0005ee 9fea      	MUL  R30,R26
0005ef 2de0      	MOV  R30,R0
0005f0 0df1      	ADD  R31,R1
0005f1 1f68      	ADC  R22,R24
0005f2 1f78      	ADC  R23,R24
0005f3 9508      	RET
                 
                 __MULD12:
0005f4 d004      	RCALL __CHKSIGND
0005f5 dfde      	RCALL __MULD12U
0005f6 f40e      	BRTC __MULD121
0005f7 dfca      	RCALL __ANEGD1
                 __MULD121:
0005f8 9508      	RET
                 
                 __CHKSIGND:
0005f9 94e8      	CLT
0005fa ff77      	SBRS R23,7
0005fb c002      	RJMP __CHKSD1
0005fc dfc5      	RCALL __ANEGD1
0005fd 9468      	SET
                 __CHKSD1:
0005fe ff97      	SBRS R25,7
0005ff c00b      	RJMP __CHKSD2
000600 2400      	CLR  R0
000601 95a0      	COM  R26
000602 95b0      	COM  R27
000603 9580      	COM  R24
000604 9590      	COM  R25
000605 9611      	ADIW R26,1
000606 1d80      	ADC  R24,R0
000607 1d90      	ADC  R25,R0
000608 f800      	BLD  R0,0
000609 9403      	INC  R0
00060a fa00      	BST  R0,0
                 __CHKSD2:
00060b 9508      	RET
                 
                 __GETD1P_INC:
00060c 91ed      	LD   R30,X+
00060d 91fd      	LD   R31,X+
00060e 916d      	LD   R22,X+
00060f 917d      	LD   R23,X+
000610 9508      	RET
                 
                 __PUTDP1_DEC:
000611 937e      	ST   -X,R23
000612 936e      	ST   -X,R22
000613 93fe      	ST   -X,R31
000614 93ee      	ST   -X,R30
000615 9508      	RET
                 
                 __GETD1S0:
000616 81e8      	LD   R30,Y
000617 81f9      	LDD  R31,Y+1
000618 816a      	LDD  R22,Y+2
000619 817b      	LDD  R23,Y+3
00061a 9508      	RET
                 
                 __GETD2S0:
00061b 81a8      	LD   R26,Y
00061c 81b9      	LDD  R27,Y+1
00061d 818a      	LDD  R24,Y+2
00061e 819b      	LDD  R25,Y+3
00061f 9508      	RET
                 
                 __PUTD1S0:
000620 83e8      	ST   Y,R30
000621 83f9      	STD  Y+1,R31
000622 836a      	STD  Y+2,R22
000623 837b      	STD  Y+3,R23
000624 9508      	RET
                 
                 __PUTPARD1:
000625 937a      	ST   -Y,R23
000626 936a      	ST   -Y,R22
000627 93fa      	ST   -Y,R31
000628 93ea      	ST   -Y,R30
000629 9508      	RET
                 
                 __PUTPARD2:
00062a 939a      	ST   -Y,R25
00062b 938a      	ST   -Y,R24
00062c 93ba      	ST   -Y,R27
00062d 93aa      	ST   -Y,R26
00062e 9508      	RET
                 
                 __SWAPD12:
00062f 2e18      	MOV  R1,R24
000630 2f86      	MOV  R24,R22
000631 2d61      	MOV  R22,R1
000632 2e19      	MOV  R1,R25
000633 2f97      	MOV  R25,R23
000634 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000635 2e1b      	MOV  R1,R27
000636 2fbf      	MOV  R27,R31
000637 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000638 2e1a      	MOV  R1,R26
000639 2fae      	MOV  R26,R30
00063a 2de1      	MOV  R30,R1
00063b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  45 r1 :  36 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  13 r17:  33 r18:  12 r19:  12 r20:  22 r21:  63 r22:  95 r23:  93 
r24:  76 r25:  61 r26: 131 r27:  72 r28:   8 r29:   1 r30: 242 r31:  88 
x  :  19 y  : 165 z  :  11 
Registers used: 24 out of 35 (68.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  29 add   :  18 
adiw  :  12 and   :   5 andi  :   2 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   1 break :   0 breq  :  24 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   2 brmi  :   9 brne  :  29 brpl  :   8 brsh  :   3 brtc  :   3 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  : 106 
cbi   :   8 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  31 cls   :   0 clt   :   4 clv   :   0 clz   :   2 com   :  12 
cp    :   7 cpc   :  21 cpi   :  33 cpse  :   0 dec   :  14 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   6 jmp   :  27 ld    :  35 ldd   :  63 ldi   : 164 
lds   :  20 lpm   :  12 lsl   :  15 lsr   :   4 mov   :  60 movw  :  17 
mul   :  19 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   2 out   :  23 pop   :  18 push  :  18 rcall :  52 ret   :  56 
reti  :   1 rjmp  :  55 rol   :  24 ror   :  18 sbc   :   7 sbci  :  13 
sbi   :   8 sbic  :   1 sbis  :   2 sbiw  :  13 sbr   :   2 sbrc  :   1 
sbrs  :   3 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  63 std   :  24 sts   :  22 sub   :   4 subi  :  17 swap  :   1 
tst   :  19 wdr   :   1 
Instructions used: 81 out of 116 (69.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000c78   3080    112   3192   16384  19.5%
[.dseg] 0x000060 0x0001b2      0     82     82    1024   8.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
